const express = require('express');
const { Op } = require('sequelize');
const bcrypt = require('bcryptjs');
const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');

const { setTokenCookie, restoreUser } = require('../../utils/auth');
const { Spot, SpotImages, Review, ReviewImage, Booking, sequelize, User, Sequelize } = require('../../db/models');
const router = express.Router();

//GET all spots
router.get('/', async (req,res, next) => {
    const where = {}
    const spots = await Spot.findAll({
        where,
        include: [
            {
            model: SpotImages,
            attributes: ['url', 'preview']
            }
        ],
        // limit: query.limit,
        // offset: query.offset
    });

    const spotObj = [];
    spots.length ?
    spots.forEach(spot => spotObj.push(spot.toJSON()))
    : spotObj.push(spots);

    for(let spot of spotObj){
        if(!Object.keys(spot).length) break;
        const review = await Review.findOne({
            where: {
                spotId: spot.id
            },
            attibutes: [
                [sequelize.fn('AVG', sequelize.col('stars')), 'avgRating']
            ]
        })
        if (review) {
            spot.avgRating = Number(review.toJSON().avgRating).toFixed(1);
        } else {
            spot.avgRating = " No Review exist for this spot"
        }

        if(spot.SpotImages.length) {
            const filterTrue = spot.SpotImages.filter(image => image.preview === true);
            filterTrue.length ? spot.previewImage = filterTrue[0].url : spot.previewImage = "No Preview Image Available"
        } else {
            spot.previewImage = "No Preview Image Available";
        }
        delete spot.SpotImages;
    };
    res.status(200);
    res.json({
        Spots: spotObj
    })
});

const SpotValidator = [
  check('address')
    .notEmpty()
    .withMessage('Street address is required'),
  check('city')
    .notEmpty()
    .withMessage('City is required'),
  check('state')
    .notEmpty()
    .withMessage('State is required'),
  check('country')
    .notEmpty()
    .withMessage('Country is required'),
  check('lat')
    .notEmpty()
    .isNumeric()
    .withMessage('Latitude is not valid'),
  check('lng')
    .notEmpty()
    .isNumeric()
    .withMessage('Longitude is not valid'),
  check('name')
    .notEmpty()
    .isLength({ max: 50 })
    .withMessage('Name must be less than 50 characters'),
  check('description')
    .notEmpty()
    .withMessage('Description is required'),
  check('description')
    .notEmpty()
    .withMessage('Price per day is required'),
    handleValidationErrors
];

//POST Create a new spot
router.post('/',
    SpotValidator,
    async (req,res, next) => {
      const { user } = req;
      const { address, city, state, country, lat, lng, name, description, price } = req.body;
      console.log("user =========>",user)
  
    if (!user) {
      const err = new Error('Login to create a spot');
       err.status = 401;
       err.title = 'Login failed';
       err.errors = { credential: 'The provided credentials were invalid.' };
           return next(err);
        }

const newSpots = await Spot.create({ownerId: user.id, address, city, state, country, lat, lng, name, description, price})


    const safeUser = {
          ownerId: user.id,
          address: address,
          city: city,
          state: state,
          country: country,
          lat: lat,
          lng: lng,
          name: name,
          description: description,
          price: price
        };  

    await setTokenCookie(res, safeUser);

    res.statusCode = 201;
    res.json({
      newSpots: safeUser  
    })
    
  }
);

module.exports = router;