const express = require('express');
const { Op } = require('sequelize');
const bcrypt = require('bcryptjs');
const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');

const { setTokenCookie, restoreUser } = require('../../utils/auth');
const { Spot, SpotImages, Review, ReviewImage, Booking, sequelize, User, Sequelize } = require('../../db/models');
const router = express.Router();

//GET all spots
router.get('/', async (req,res, next) => {
    const where = {}
    const spots = await Spot.findAll({
        where,
        include: [
            {
            model: SpotImages,
            attributes: ['url', 'preview']
            }
        ],
        // limit: query.limit,
        // offset: query.offset
    });

    const spotObj = [];
    spots.length ?
    spots.forEach(spot => spotObj.push(spot.toJSON()))
    : spotObj.push(spots);

    for(let spot of spotObj){
        if(!Object.keys(spot).length) break;
        const review = await Review.findOne({
            where: {
                spotId: spot.id
            },
            attibutes: [
                [sequelize.fn('AVG', sequelize.col('stars')), 'avgRating']
            ]
        })
        if (review) {
            spot.avgRating = Number(review.toJSON().avgRating).toFixed(1);
        } else {
            spot.avgRating = " No Review exist for this spot"
        }

        if(spot.SpotImages.length) {
            const filterTrue = spot.SpotImages.filter(image => image.preview === true);
            filterTrue.length ? spot.previewImage = filterTrue[0].url : spot.previewImage = "No Preview Image Available"
        } else {
            spot.previewImage = "No Preview Image Available";
        }
        delete spot.SpotImages;
    };
    res.status(200);
    res.json({
        Spots: spotObj
    })
});

const SpotValidator = [
    check('credential')
    .exists({ checkFalsy: true })
    .notEmpty()
];
// const validateLogin = [
//     check('credential')
//       .exists({ checkFalsy: true })
//       .notEmpty()
//       .withMessage('Please provide a valid email or username.'),
//     check('password')
//       .exists({ checkFalsy: true })
//       .withMessage('Please provide a password.'),
//     handleValidationErrors
//   ];
//POST
router.post('/', SpotValidator,async (req,res, next) => {
const { user } = req;
const { address, city, state, country, lat, lng, name, description, price } = req.body;

if (!user) res.json({error: "Logging to create a spot"})

if(user) {
    const userI = await User.findByPk(user.id);
    const newSpots = await Spot.create({
        ownerId: userI.id,
        address,
        city,
        state,
        country,
        lat,
        lng,
        name,
        description,
        price
        })
    
    res.statusCode = 201;
    res.json(newSpots)
    }
});

module.exports = router;